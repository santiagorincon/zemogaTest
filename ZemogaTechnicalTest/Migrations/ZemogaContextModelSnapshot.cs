// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZemogaTechnicalTest.Data;

namespace ZemogaTechnicalTest.Migrations
{
    [DbContext(typeof(ZemogaContext))]
    partial class ZemogaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ZemogaTechnicalTest.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int>("AuthorID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("EditorID");

                    b.Property<string>("PostContent")
                        .IsRequired();

                    b.Property<string>("PostName")
                        .IsRequired();

                    b.Property<int>("StatusID");

                    b.Property<DateTime?>("SubmitDate");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("EditorID");

                    b.HasIndex("StatusID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.PostActivity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivityDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("NewStatusID");

                    b.Property<int?>("OldStatusID");

                    b.Property<int>("PostID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("NewStatusID");

                    b.HasIndex("OldStatusID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("PostActivity");
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.PostComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("PostID");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleCode")
                        .IsRequired();

                    b.Property<string>("RoleDesc")
                        .IsRequired();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusCode")
                        .IsRequired();

                    b.Property<string>("StatusDesc")
                        .IsRequired();

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("RoleID");

                    b.Property<string>("UserFullname")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.Post", b =>
                {
                    b.HasOne("ZemogaTechnicalTest.Models.User", "Author")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZemogaTechnicalTest.Models.User", "Editor")
                        .WithMany("EditedPosts")
                        .HasForeignKey("EditorID");

                    b.HasOne("ZemogaTechnicalTest.Models.Status", "Status")
                        .WithMany("Posts")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.PostActivity", b =>
                {
                    b.HasOne("ZemogaTechnicalTest.Models.Status", "NewStatus")
                        .WithMany("NewStatusActivities")
                        .HasForeignKey("NewStatusID");

                    b.HasOne("ZemogaTechnicalTest.Models.Status", "OldStatus")
                        .WithMany("OldStatusActivities")
                        .HasForeignKey("OldStatusID");

                    b.HasOne("ZemogaTechnicalTest.Models.Post", "Post")
                        .WithMany("PostActivities")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZemogaTechnicalTest.Models.User", "User")
                        .WithMany("PostActivities")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.PostComment", b =>
                {
                    b.HasOne("ZemogaTechnicalTest.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZemogaTechnicalTest.Models.User", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ZemogaTechnicalTest.Models.User", b =>
                {
                    b.HasOne("ZemogaTechnicalTest.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
